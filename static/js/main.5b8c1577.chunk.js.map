{"version":3,"sources":["config/index.js","config/development.js","config/production.js","Header/UserBox/UserBox.js","Header/Header.js","Feed/Post/TagList/TagList.js","Feed/Post/Post.js","Feed/Feed.js","Profile/Profile.js","models/post.model.js","CreatePost/CreatePost.js","models/register.model.js","Register/Register.js","models/login.model.js","Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["env","development","apiUrl","production","UserBox","props","state","user","fetch","config","credentials","then","res","json","setState","catch","e","console","log","className","this","username","to","Component","Header","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","inline","TagList","tags","map","tag","index","key","Post","format","created","src","image","alt","likes","title","Feed","posts","isLoading","color","size","sizeUnit","post","_id","userId","Profile","schema","yup","shape","min","max","required","CreatePost","values","data","FormData","Array","isArray","forEach","value","append","formData","convertToFormData","method","body","err","initialValues","validationSchema","postModel","onSubmit","submit","bind","render","setFieldValue","Group","controlId","Label","type","name","onChange","event","currentTarget","files","htmlFor","placeholder","component","handleTagsChange","Button","variant","password","gender","birthDate","about","Register","JSON","stringify","headers","history","push","Date","registerModel","as","withRouter","Login","incorrectLoginMessage","status","loginModel","App","path","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b8c1577.chunk.js","sourcesContent":["import development from './development';\r\nimport production from './production';\r\n\r\nconst env = {\r\n    development,\r\n    production\r\n};\r\n\r\nexport default env [process.env.NODE_ENV || 'development'];","export default {\r\n    apiUrl: 'http://localhost:4000'\r\n};","export default {\r\n    apiUrl: 'https://app-instagram-api.herokuapp.com'\r\n};","import React, {Component} from 'react';\r\nimport config from \"../../config\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass UserBox extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(config.apiUrl + '/api/users/me', {\r\n            credentials: \"include\"\r\n        })\r\n            .then(res => res.json())\r\n            .then(user => {\r\n                this.setState({\r\n                    user: user\r\n                });\r\n            })\r\n            .catch(e => console.log(e))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"user-actions\">\r\n                {this.state.user\r\n                    ? <span>Hello {this.state.user.username}</span>\r\n                    : <div>\r\n                        <Link to=\"/register\">Register</Link>\r\n                        <Link to=\"/login\">Login</Link>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserBox;","import React, {Component} from 'react';\r\nimport \"./Header.scss\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport { FaUserCircle } from 'react-icons/all';\r\nimport UserBox from \"./UserBox/UserBox\";\r\n\r\nclass Header extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"light\" expand=\"lg\" className=\"header\">\r\n                <Navbar.Brand href=\"#home\" className=\"navbar-brand\">Instagram</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Link className=\"nav-link\" to=\"/\">Home</Link>\r\n                        <Link className=\"nav-link\" to=\"/profile\">Profile</Link>\r\n                        <Link className=\"nav-link\" to=\"/post/create\">Create Post</Link>\r\n                    </Nav>\r\n                    <div inline=\"true\">\r\n                        <div className=\"user\">\r\n                            <div className=\"user-avatar\">\r\n                                <FaUserCircle className=\"user-icon\" />\r\n                            </div>\r\n                           <UserBox  />\r\n                        </div>\r\n                    </div>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport './TagList.scss'\r\n\r\nclass TagList extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TagList\">\r\n                {this.props.tags.map((tag, index) => {\r\n                    return <div key={index} className=\"tag\">\r\n                        <a href=\"#\">#{tag}</a>\r\n                    </div>\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TagList;","import React, {Component} from 'react';\r\nimport Moment from 'react-moment';\r\nimport \"./Post.scss\";\r\nimport { FaUserCircle, FaRegHeart, FaRegComment, FaRegShareSquare, FaRegBookmark } from 'react-icons/all';\r\nimport TagList from \"./TagList/TagList\";\r\nimport config from '../../config';\r\n\r\n\r\nclass Post extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"post\">\r\n                <div className=\"post-header\">\r\n                    <div className=\"user-details\">\r\n                        <FaUserCircle className=\"user-icon\"/>\r\n                        <h4 className=\"user-id\">{this.props.user}</h4>\r\n                    </div>\r\n                    <div className=\"created\">\r\n                        <Moment format=\"MMM DD, YYYY\">{this.props.created}</Moment>\r\n                    </div>\r\n                </div>\r\n\r\n                <img src={config.apiUrl + '/' + this.props.image} alt=\"image\" className=\"post-image\" />\r\n                <div className=\"post-reactions\">\r\n                    <div className=\"like-comment-share\">\r\n                        <button className=\"action-button\">\r\n                            <FaRegHeart className=\"icon\" />\r\n                        </button>\r\n                        <button className=\"action-button\">\r\n                            <FaRegComment className=\"icon\" />\r\n                        </button>\r\n                        <button className=\"action-button\">\r\n                            <FaRegShareSquare className=\"icon\" />\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"bookmark\">\r\n                        <button className=\"action-button\">\r\n                            <FaRegBookmark className=\"icon\" />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"post-details\">\r\n                    <span className=\"post-likes\">{this.props.likes} Likes</span>\r\n                    <p className=\"post-title\">{this.props.title}</p>\r\n                    <TagList tags={this.props.tags} className=\"tags-list\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Post;","import React, {Component} from 'react';\r\nimport \"./Feed.scss\";\r\nimport Post from \"./Post/Post\";\r\nimport {BeatLoader} from 'react-spinners';\r\nimport config from '../config';\r\n\r\nclass Feed extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            posts:[],\r\n            isLoading: true\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(config.apiUrl + '/api/posts')\r\n            .then(res => res.json())\r\n            .then(posts => {\r\n                this.setState({\r\n                    isLoading: false,\r\n                    posts\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.isLoading) {\r\n            return (\r\n                <div className=\"loader\">\r\n                    <BeatLoader\r\n                        color={'#faebd7'}\r\n                        size={'25'}\r\n                        sizeUnit={'px'}\r\n                    />\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div className=\"Feed\">\r\n                {this.state.posts.map((post) => {\r\n                    return <Post\r\n                        key={post._id}\r\n                        user={post.userId}\r\n                        image={post.image}\r\n                        title={post.title}\r\n                        likes={post.likes}\r\n                        tags={post.tags}\r\n                        created={post.created}\r\n                        />\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Feed;","import React, {Component} from 'react';\r\nimport \"./Profile.scss\";\r\n\r\nclass Profile extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Profile\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Profile;","import * as yup from 'yup';\r\n\r\nlet schema = yup.object().shape({\r\n    title: yup.string().min(2).max(255).required(),\r\n    image: yup.mixed().required(),\r\n    tags: yup.array()\r\n});\r\n\r\nexport default schema;","import React, {Component} from 'react';\r\nimport './CreatePost.scss';\r\nimport { Form as BForm, Button } from 'react-bootstrap';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport postModel from '../models/post.model';\r\nimport {FaCloudUploadAlt, FaFileImage, FaRegLightbulb} from \"react-icons/all\";\r\nimport TagsInput from 'react-tagsinput';\r\nimport config from '../config';\r\n\r\nclass CreatePost extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tags: []\r\n        }\r\n    }\r\n\r\n    handleTagsChange(tags) {\r\n        this.setState({\r\n            tags: tags\r\n        });\r\n    }\r\n\r\n    convertToFormData(values) {\r\n        const data = new FormData();\r\n        for (let key in values) {\r\n            Array.isArray(values[key])\r\n                ? values[key].forEach(value => data.append(key + '[]', value))\r\n                : data.append(key, values[key]);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    submit(values) {\r\n        const formData = this.convertToFormData(values);\r\n        fetch(config.apiUrl + '/api/posts', {\r\n            method: 'POST',\r\n            credentials: \"include\",\r\n            body: formData\r\n        }).then(res => res.json())\r\n            .then(post => console.log(post))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"create-post\">\r\n                <Formik initialValues={{image: '', title: '', tags: []}}\r\n                        validationSchema={postModel}\r\n                        onSubmit={this.submit.bind(this)}\r\n                        render={({setFieldValue}) => {\r\n                            return <Form className=\"col-xs-12 col-sm-6\">\r\n                                <h2 className=\"form-title\">Create Post:</h2>\r\n                                <BForm.Group controlId=\"formBasicFile\">\r\n                                    <BForm.Label>Load Image:</BForm.Label>\r\n                                    <input type=\"file\" name=\"image\" id=\"image\" className=\"form-control-image\" onChange={(event) => {\r\n                                        setFieldValue('image', event.currentTarget.files[0]);\r\n                                    }} />\r\n                                    <label htmlFor=\"image\" className=\"upload-btn\">\r\n                                <span>\r\n                                    <FaFileImage className=\"upload-icon\"/>\r\n                                    Select your image...\r\n                                </span>\r\n                                    </label>\r\n                                </BForm.Group>\r\n                                <BForm.Group controlId=\"formBasicEmail\">\r\n                                    <BForm.Label>Post Title:</BForm.Label>\r\n                                    <Field name=\"title\" className=\"form-control\" placeholder=\"Place your post title here\"/>\r\n                                    <ErrorMessage className=\"alert alert-danger\" name=\"title\" component=\"div\" />\r\n                                </BForm.Group>\r\n                                <BForm.Group controlId=\"formBasicEmail\">\r\n                                    <BForm.Label>Post Tags:</BForm.Label>\r\n                                    <TagsInput\r\n                                        value={this.state.tags}\r\n                                        onChange={(tags) => {\r\n                                            this.handleTagsChange(tags);\r\n                                            setFieldValue('tags', tags);\r\n                                        }}\r\n                                        className=\"tags-input\"\r\n                                    />\r\n                                    <ErrorMessage className=\"alert alert-danger mt-2\" name=\"tags\" component=\"div\" />\r\n                                    <FaRegLightbulb/><span>Press Enter for each tag</span>\r\n                                </BForm.Group>\r\n                                <Button variant=\"primary\" type=\"submit\" className=\"share-btn\">\r\n                                    <FaCloudUploadAlt className=\"share-icon\" />\r\n                                    Upload your post...\r\n                                </Button>\r\n                            </Form>\r\n                    }}>\r\n                </Formik>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreatePost;","import * as yup from 'yup';\r\n\r\nlet schema = yup.object().shape({\r\n    name: yup.string().min(2).max(255).required(),\r\n    username: yup.string().min(2).max(255).required(),\r\n    password: yup.string().min(2).max(16).required(),\r\n    gender: yup.string().required(),\r\n    birthDate: yup.date().required(),\r\n    about: yup.string()\r\n});\r\n\r\nexport default schema;","import React, { Component } from 'react';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport registerModel from '../models/register.model';\r\nimport { Button } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './Register.scss';\r\n\r\nclass Register extends Component {\r\n\r\n    submit(values) {\r\n        fetch('http://localhost:4000/api/users', {\r\n            method: 'POST',\r\n            body: JSON.stringify(values),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(() => this.props.history.push('/'));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"register-form\">\r\n                <h2 className=\"form-title\">Registration</h2>\r\n                <hr />\r\n                <Formik initialValues={{name: '', username: '', password: '', birthDate: new Date(), gender: 'm', about: ''}}\r\n                        validationSchema={registerModel}\r\n                        onSubmit={this.submit.bind(this)}>\r\n                    <Form className=\"col-xs-12 col-md-6\">\r\n                        <div className=\"row form-group\">\r\n                            <label htmlFor=\"name\">Name:</label>\r\n                            <Field name=\"name\" id=\"name\" className=\"form-control\" />\r\n                            <ErrorMessage className=\"alert alert-danger mt-2\" name=\"name\" component=\"div\" />\r\n                        </div>\r\n                        <div className=\"row form-group\">\r\n                            <label htmlFor=\"username\">Username:</label>\r\n                            <Field name=\"username\" id=\"username\" className=\"form-control\" />\r\n                            <ErrorMessage className=\"alert alert-danger mt-2\" name=\"username\" component=\"div\" />\r\n                        </div>\r\n                        <div className=\"row form-group\">\r\n                            <label htmlFor=\"password\">Password:</label>\r\n                            <Field type=\"password\" name=\"password\" id=\"password\" className=\"form-control\" />\r\n                            <ErrorMessage className=\"alert alert-danger mt-2\" name=\"password\" component=\"div\" />\r\n                        </div>\r\n                        <div className=\"row form-group\">\r\n                            <label htmlFor=\"birthDate\">Birth Date:</label>\r\n                            <Field type=\"date\" name=\"birthDate\" id=\"birthDate\" className=\"form-control\" />\r\n                            <ErrorMessage className=\"alert alert-danger mt-2\" name=\"birthDate\" component=\"div\" />\r\n                        </div>\r\n                        <div className=\"row form-group\">\r\n                            <label htmlFor=\"gender\">Gender:</label>\r\n                            <Field component=\"select\" name=\"birthDate\" id=\"gender\" className=\"form-control\">\r\n                                <option value=\"m\">Male</option>\r\n                                <option value=\"f\">Female</option>\r\n                            </Field>\r\n                            <ErrorMessage className=\"alert alert-danger mt-2\" name=\"birthDate\" component=\"div\" />\r\n                        </div>\r\n                        <div className=\"row form-group\">\r\n                            <label htmlFor=\"about\">About:</label>\r\n                            <Field as=\"textarea\" id=\"about\" name=\"about\" className=\"form-control\" />\r\n                            <ErrorMessage className=\"alert alert-danger mt-2\" name=\"about\" component=\"div\" />\r\n                        </div>\r\n                        <div className=\"row form-group d-flex justify-content-end\">\r\n                            <Button type=\"submit\" className=\"register-btn\">Register</Button>\r\n                        </div>\r\n                    </Form>\r\n                </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Register);","import * as yup from 'yup';\r\n\r\nlet schema = yup.object().shape({\r\n    username: yup.string().min(2).max(255).required(),\r\n    password: yup.string().min(2).max(16).required(),\r\n});\r\n\r\nexport default schema;","\r\nimport React, { Component } from 'react';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport loginModel from '../models/login.model';\r\nimport { Button } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './Login.scss';\r\n\r\nclass Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            incorrectLoginMessage: false\r\n        };\r\n    }\r\n\r\n    submit(values) {\r\n        this.setState({incorrectLoginMessage: false});\r\n        fetch('http://localhost:4000/api/users/login', {\r\n            method: 'POST',\r\n            body: JSON.stringify(values),\r\n            credentials: \"include\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => {\r\n            if(res.status === 200) {\r\n                this.props.history.push('/');\r\n            } else if(res.status === 403) {\r\n                this.setState({incorrectLoginMessage: true});\r\n            } else {\r\n                console.log('Unexpected error');\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login-form\">\r\n                <h2 className=\"form-title\">Login</h2>\r\n                <hr />\r\n                <Formik initialValues={{username: '', password: ''}}\r\n                        validationSchema={loginModel}\r\n                        onSubmit={this.submit.bind(this)}>\r\n                    <Form className=\"col-xs-12 col-md-6\">\r\n                        {this.state.incorrectLoginMessage ? <div className=\"row alert alert-danger mt-2\">Incorrect username or password</div> : null}\r\n                        <div className=\"row form-group\">\r\n                            <label htmlFor=\"username\">Username:</label>\r\n                            <Field name=\"username\" id=\"username\" className=\"form-control\" />\r\n                            <ErrorMessage className=\"alert alert-danger mt-2\" name=\"username\" component=\"div\" />\r\n                        </div>\r\n                        <div className=\"row form-group\">\r\n                            <label htmlFor=\"password\">Password:</label>\r\n                            <Field type=\"password\" name=\"password\" id=\"password\" className=\"form-control\" />\r\n                            <ErrorMessage className=\"alert alert-danger mt-2\" name=\"password\" component=\"div\" />\r\n                        </div>\r\n                        <div className=\"row form-group d-flex justify-content-end\">\r\n                            <Button type=\"submit\" className=\"login-btn\">Login</Button>\r\n                        </div>\r\n                    </Form>\r\n                </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Login);","import React from 'react';\nimport './App.scss';\nimport Header from \"./Header/Header\";\nimport Feed from \"./Feed/Feed\";\nimport Profile from \"./Profile/Profile\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport CreatePost from \"./CreatePost/CreatePost\";\nimport Register from './Register/Register';\nimport Login from './Login/Login';\n\nfunction App() {\n  return (\n      <Router>\n        <div className=\"App\">\n          <Header />\n          <main className=\"container\">\n            <Switch>\n              <Route path=\"/profile\">\n                <Profile />\n              </Route>\n              <Route path=\"/post/create\">\n                <CreatePost />\n              </Route>\n              <Route path=\"/register\">\n                <Register />\n              </Route>\n              <Route path=\"/login\">\n                <Login />\n              </Route>\n              <Route path=\"/\">\n                <Feed />\n              </Route>\n            </Switch>\n          </main>\n        </div>\n      </Router>\n\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}